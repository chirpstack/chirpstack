// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: api/device_profile.proto

package api

import (
	common "github.com/chirpstack/chirpstack/api/go/v4/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CodecRuntime int32

const (
	// None.
	CodecRuntime_NONE CodecRuntime = 0
	// Cayenne LPP.
	CodecRuntime_CAYENNE_LPP CodecRuntime = 1
	// JavaScript.
	CodecRuntime_JS CodecRuntime = 2
)

// Enum value maps for CodecRuntime.
var (
	CodecRuntime_name = map[int32]string{
		0: "NONE",
		1: "CAYENNE_LPP",
		2: "JS",
	}
	CodecRuntime_value = map[string]int32{
		"NONE":        0,
		"CAYENNE_LPP": 1,
		"JS":          2,
	}
)

func (x CodecRuntime) Enum() *CodecRuntime {
	p := new(CodecRuntime)
	*p = x
	return p
}

func (x CodecRuntime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodecRuntime) Descriptor() protoreflect.EnumDescriptor {
	return file_api_device_profile_proto_enumTypes[0].Descriptor()
}

func (CodecRuntime) Type() protoreflect.EnumType {
	return &file_api_device_profile_proto_enumTypes[0]
}

func (x CodecRuntime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodecRuntime.Descriptor instead.
func (CodecRuntime) EnumDescriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{0}
}

type MeasurementKind int32

const (
	// Unknown (in which case it is not tracked).
	MeasurementKind_UNKNOWN MeasurementKind = 0
	// Incrementing counters that never decrease (these are not reset on each
	// reading).
	MeasurementKind_COUNTER MeasurementKind = 1
	// Counters that do get reset upon reading.
	MeasurementKind_ABSOLUTE MeasurementKind = 2
	// E.g. a temperature value.
	MeasurementKind_GAUGE MeasurementKind = 3
	// E.g. a firmware version, true / false value.
	MeasurementKind_STRING MeasurementKind = 4
)

// Enum value maps for MeasurementKind.
var (
	MeasurementKind_name = map[int32]string{
		0: "UNKNOWN",
		1: "COUNTER",
		2: "ABSOLUTE",
		3: "GAUGE",
		4: "STRING",
	}
	MeasurementKind_value = map[string]int32{
		"UNKNOWN":  0,
		"COUNTER":  1,
		"ABSOLUTE": 2,
		"GAUGE":    3,
		"STRING":   4,
	}
)

func (x MeasurementKind) Enum() *MeasurementKind {
	p := new(MeasurementKind)
	*p = x
	return p
}

func (x MeasurementKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasurementKind) Descriptor() protoreflect.EnumDescriptor {
	return file_api_device_profile_proto_enumTypes[1].Descriptor()
}

func (MeasurementKind) Type() protoreflect.EnumType {
	return &file_api_device_profile_proto_enumTypes[1]
}

func (x MeasurementKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasurementKind.Descriptor instead.
func (MeasurementKind) EnumDescriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{1}
}

type CadPeriodicity int32

const (
	// 1 second.
	CadPeriodicity_SEC_1 CadPeriodicity = 0
	// 500 milliseconds
	CadPeriodicity_MS_500 CadPeriodicity = 1
	// 250 milliseconds
	CadPeriodicity_MS_250 CadPeriodicity = 2
	// 100 milliseconds
	CadPeriodicity_MS_100 CadPeriodicity = 3
	// 50 milliseconds
	CadPeriodicity_MS_50 CadPeriodicity = 4
	// 20 milliseconds
	CadPeriodicity_MS_20 CadPeriodicity = 5
)

// Enum value maps for CadPeriodicity.
var (
	CadPeriodicity_name = map[int32]string{
		0: "SEC_1",
		1: "MS_500",
		2: "MS_250",
		3: "MS_100",
		4: "MS_50",
		5: "MS_20",
	}
	CadPeriodicity_value = map[string]int32{
		"SEC_1":  0,
		"MS_500": 1,
		"MS_250": 2,
		"MS_100": 3,
		"MS_50":  4,
		"MS_20":  5,
	}
)

func (x CadPeriodicity) Enum() *CadPeriodicity {
	p := new(CadPeriodicity)
	*p = x
	return p
}

func (x CadPeriodicity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CadPeriodicity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_device_profile_proto_enumTypes[2].Descriptor()
}

func (CadPeriodicity) Type() protoreflect.EnumType {
	return &file_api_device_profile_proto_enumTypes[2]
}

func (x CadPeriodicity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CadPeriodicity.Descriptor instead.
func (CadPeriodicity) EnumDescriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{2}
}

type SecondChAckOffset int32

const (
	// 0 kHz.
	SecondChAckOffset_KHZ_0 SecondChAckOffset = 0
	// 200 kHz.
	SecondChAckOffset_KHZ_200 SecondChAckOffset = 1
	// 400 kHz.
	SecondChAckOffset_KHZ_400 SecondChAckOffset = 2
	// 800 kHz.
	SecondChAckOffset_KHZ_800 SecondChAckOffset = 3
	// 1600 kHz.
	SecondChAckOffset_KHZ_1600 SecondChAckOffset = 4
	// 3200 kHz.
	SecondChAckOffset_KHZ_3200 SecondChAckOffset = 5
)

// Enum value maps for SecondChAckOffset.
var (
	SecondChAckOffset_name = map[int32]string{
		0: "KHZ_0",
		1: "KHZ_200",
		2: "KHZ_400",
		3: "KHZ_800",
		4: "KHZ_1600",
		5: "KHZ_3200",
	}
	SecondChAckOffset_value = map[string]int32{
		"KHZ_0":    0,
		"KHZ_200":  1,
		"KHZ_400":  2,
		"KHZ_800":  3,
		"KHZ_1600": 4,
		"KHZ_3200": 5,
	}
)

func (x SecondChAckOffset) Enum() *SecondChAckOffset {
	p := new(SecondChAckOffset)
	*p = x
	return p
}

func (x SecondChAckOffset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecondChAckOffset) Descriptor() protoreflect.EnumDescriptor {
	return file_api_device_profile_proto_enumTypes[3].Descriptor()
}

func (SecondChAckOffset) Type() protoreflect.EnumType {
	return &file_api_device_profile_proto_enumTypes[3]
}

func (x SecondChAckOffset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecondChAckOffset.Descriptor instead.
func (SecondChAckOffset) EnumDescriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{3}
}

type RelayModeActivation int32

const (
	// Disable the relay mode.
	RelayModeActivation_DISABLE_RELAY_MODE RelayModeActivation = 0
	// Enable the relay model.
	RelayModeActivation_ENABLE_RELAY_MODE RelayModeActivation = 1
	// Dynamic.
	RelayModeActivation_DYNAMIC RelayModeActivation = 2
	// End-device controlled.
	RelayModeActivation_END_DEVICE_CONTROLLED RelayModeActivation = 3
)

// Enum value maps for RelayModeActivation.
var (
	RelayModeActivation_name = map[int32]string{
		0: "DISABLE_RELAY_MODE",
		1: "ENABLE_RELAY_MODE",
		2: "DYNAMIC",
		3: "END_DEVICE_CONTROLLED",
	}
	RelayModeActivation_value = map[string]int32{
		"DISABLE_RELAY_MODE":    0,
		"ENABLE_RELAY_MODE":     1,
		"DYNAMIC":               2,
		"END_DEVICE_CONTROLLED": 3,
	}
)

func (x RelayModeActivation) Enum() *RelayModeActivation {
	p := new(RelayModeActivation)
	*p = x
	return p
}

func (x RelayModeActivation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelayModeActivation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_device_profile_proto_enumTypes[4].Descriptor()
}

func (RelayModeActivation) Type() protoreflect.EnumType {
	return &file_api_device_profile_proto_enumTypes[4]
}

func (x RelayModeActivation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelayModeActivation.Descriptor instead.
func (RelayModeActivation) EnumDescriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{4}
}

type DeviceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-profile ID (UUID).
	// Note: on create this will be automatically generated.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tenant ID (UUID).
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description.
	Description string `protobuf:"bytes,26,opt,name=description,proto3" json:"description,omitempty"`
	// Region.
	Region common.Region `protobuf:"varint,4,opt,name=region,proto3,enum=common.Region" json:"region,omitempty"`
	// LoRaWAN mac-version.
	MacVersion common.MacVersion `protobuf:"varint,5,opt,name=mac_version,json=macVersion,proto3,enum=common.MacVersion" json:"mac_version,omitempty"`
	// Regional parameters revision.
	RegParamsRevision common.RegParamsRevision `protobuf:"varint,6,opt,name=reg_params_revision,json=regParamsRevision,proto3,enum=common.RegParamsRevision" json:"reg_params_revision,omitempty"`
	// ADR algorithm ID.
	AdrAlgorithmId string `protobuf:"bytes,7,opt,name=adr_algorithm_id,json=adrAlgorithmId,proto3" json:"adr_algorithm_id,omitempty"`
	// Payload codec runtime.
	PayloadCodecRuntime CodecRuntime `protobuf:"varint,8,opt,name=payload_codec_runtime,json=payloadCodecRuntime,proto3,enum=api.CodecRuntime" json:"payload_codec_runtime,omitempty"`
	// Payload codec script.
	PayloadCodecScript string `protobuf:"bytes,9,opt,name=payload_codec_script,json=payloadCodecScript,proto3" json:"payload_codec_script,omitempty"`
	// Flush queue on device activation.
	FlushQueueOnActivate bool `protobuf:"varint,10,opt,name=flush_queue_on_activate,json=flushQueueOnActivate,proto3" json:"flush_queue_on_activate,omitempty"`
	// Uplink interval (seconds).
	// This defines the expected uplink interval which the device uses for
	// communication. If the uplink interval has expired and no uplink has
	// been received, the device is considered inactive.
	UplinkInterval uint32 `protobuf:"varint,11,opt,name=uplink_interval,json=uplinkInterval,proto3" json:"uplink_interval,omitempty"`
	// Device-status request interval (times / day).
	// This defines the times per day that ChirpStack will request the
	// device-status from the device.
	DeviceStatusReqInterval uint32 `protobuf:"varint,12,opt,name=device_status_req_interval,json=deviceStatusReqInterval,proto3" json:"device_status_req_interval,omitempty"`
	// Supports OTAA.
	SupportsOtaa bool `protobuf:"varint,13,opt,name=supports_otaa,json=supportsOtaa,proto3" json:"supports_otaa,omitempty"`
	// Supports Class B.
	SupportsClassB bool `protobuf:"varint,14,opt,name=supports_class_b,json=supportsClassB,proto3" json:"supports_class_b,omitempty"`
	// Supports Class-C.
	SupportsClassC bool `protobuf:"varint,15,opt,name=supports_class_c,json=supportsClassC,proto3" json:"supports_class_c,omitempty"`
	// Class-B timeout (seconds).
	// This is the maximum time ChirpStack will wait to receive an acknowledgement
	// from the device (if requested).
	ClassBTimeout uint32 `protobuf:"varint,16,opt,name=class_b_timeout,json=classBTimeout,proto3" json:"class_b_timeout,omitempty"`
	// Class-B ping-slots per beacon period.
	// Valid options are: 0 - 7.
	//
	// The actual number of ping-slots per beacon period equals to 2^k.
	ClassBPingSlotNbK uint32 `protobuf:"varint,17,opt,name=class_b_ping_slot_nb_k,json=classBPingSlotNbK,proto3" json:"class_b_ping_slot_nb_k,omitempty"`
	// Class-B ping-slot DR.
	ClassBPingSlotDr uint32 `protobuf:"varint,18,opt,name=class_b_ping_slot_dr,json=classBPingSlotDr,proto3" json:"class_b_ping_slot_dr,omitempty"`
	// Class-B ping-slot freq (Hz).
	ClassBPingSlotFreq uint32 `protobuf:"varint,19,opt,name=class_b_ping_slot_freq,json=classBPingSlotFreq,proto3" json:"class_b_ping_slot_freq,omitempty"`
	// Class-C timeout (seconds).
	// This is the maximum time ChirpStack will wait to receive an acknowledgement
	// from the device (if requested).
	ClassCTimeout uint32 `protobuf:"varint,20,opt,name=class_c_timeout,json=classCTimeout,proto3" json:"class_c_timeout,omitempty"`
	// RX1 delay (for ABP).
	AbpRx1Delay uint32 `protobuf:"varint,21,opt,name=abp_rx1_delay,json=abpRx1Delay,proto3" json:"abp_rx1_delay,omitempty"`
	// RX1 DR offset (for ABP).
	AbpRx1DrOffset uint32 `protobuf:"varint,22,opt,name=abp_rx1_dr_offset,json=abpRx1DrOffset,proto3" json:"abp_rx1_dr_offset,omitempty"`
	// RX2 DR (for ABP).
	AbpRx2Dr uint32 `protobuf:"varint,23,opt,name=abp_rx2_dr,json=abpRx2Dr,proto3" json:"abp_rx2_dr,omitempty"`
	// RX2 frequency (for ABP, Hz).
	AbpRx2Freq uint32 `protobuf:"varint,24,opt,name=abp_rx2_freq,json=abpRx2Freq,proto3" json:"abp_rx2_freq,omitempty"`
	// Tags (user defined).
	// These tags can be used to add additional information the the
	// device-profile. These tags are exposed in all the integration events of
	// devices using this device-profile.
	Tags map[string]string `protobuf:"bytes,25,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Measurements.
	// If defined, ChirpStack will visualize these metrics in the web-interface.
	Measurements map[string]*Measurement `protobuf:"bytes,27,rep,name=measurements,proto3" json:"measurements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Auto-detect measurements.
	// If set to true, measurements will be automatically added based on the
	// keys of the decoded payload. In cases where the decoded payload contains
	// random keys in the data, you want to set this to false.
	AutoDetectMeasurements bool `protobuf:"varint,28,opt,name=auto_detect_measurements,json=autoDetectMeasurements,proto3" json:"auto_detect_measurements,omitempty"`
	// Region configuration ID.
	// If set, devices will only use the associated region. If let blank, then
	// devices will use all regions matching the selected common-name. Note
	// that multiple region configurations can exist for the same common-name,
	// e.g. to provide an 8 channel and 16 channel configuration for the US915
	// band.
	RegionConfigId string `protobuf:"bytes,29,opt,name=region_config_id,json=regionConfigId,proto3" json:"region_config_id,omitempty"`
	// Device is a Relay device.
	// Enable this in case the device is a Relay. A Relay device implements TS011
	// and is able to relay data from relay capable devices.
	// See for more information the TS011 specification.
	IsRelay bool `protobuf:"varint,30,opt,name=is_relay,json=isRelay,proto3" json:"is_relay,omitempty"`
	// Device is a Relay end-device.
	// Enable this in case the device is an end-device that can operate under a
	// Relay. Please refer to the TS011 specification for more information.
	IsRelayEd bool `protobuf:"varint,31,opt,name=is_relay_ed,json=isRelayEd,proto3" json:"is_relay_ed,omitempty"`
	// End-device only accept data through relay.
	// Only accept data for this device through a relay. This setting is useful
	// for testing as in case of a test-setup, the end-device is usually within
	// range of the gateway.
	RelayEdRelayOnly bool `protobuf:"varint,32,opt,name=relay_ed_relay_only,json=relayEdRelayOnly,proto3" json:"relay_ed_relay_only,omitempty"`
	// Relay must be enabled.
	RelayEnabled bool `protobuf:"varint,33,opt,name=relay_enabled,json=relayEnabled,proto3" json:"relay_enabled,omitempty"`
	// Relay CAD periodicity.
	RelayCadPeriodicity CadPeriodicity `protobuf:"varint,34,opt,name=relay_cad_periodicity,json=relayCadPeriodicity,proto3,enum=api.CadPeriodicity" json:"relay_cad_periodicity,omitempty"`
	// Relay default channel index.
	// Valid values are 0 and 1, please refer to the RP002 specification for
	// the meaning of these values.
	RelayDefaultChannelIndex uint32 `protobuf:"varint,35,opt,name=relay_default_channel_index,json=relayDefaultChannelIndex,proto3" json:"relay_default_channel_index,omitempty"`
	// Relay second channel frequency (Hz).
	RelaySecondChannelFreq uint32 `protobuf:"varint,36,opt,name=relay_second_channel_freq,json=relaySecondChannelFreq,proto3" json:"relay_second_channel_freq,omitempty"`
	// Relay second channel DR.
	RelaySecondChannelDr uint32 `protobuf:"varint,37,opt,name=relay_second_channel_dr,json=relaySecondChannelDr,proto3" json:"relay_second_channel_dr,omitempty"`
	// Relay second channel ACK offset.
	RelaySecondChannelAckOffset SecondChAckOffset `protobuf:"varint,38,opt,name=relay_second_channel_ack_offset,json=relaySecondChannelAckOffset,proto3,enum=api.SecondChAckOffset" json:"relay_second_channel_ack_offset,omitempty"`
	// Relay end-device activation mode.
	RelayEdActivationMode RelayModeActivation `protobuf:"varint,39,opt,name=relay_ed_activation_mode,json=relayEdActivationMode,proto3,enum=api.RelayModeActivation" json:"relay_ed_activation_mode,omitempty"`
	// Relay end-device smart-enable level.
	RelayEdSmartEnableLevel uint32 `protobuf:"varint,40,opt,name=relay_ed_smart_enable_level,json=relayEdSmartEnableLevel,proto3" json:"relay_ed_smart_enable_level,omitempty"`
	// Relay end-device back-off (in case it does not receive WOR ACK frame).
	// 0 = Always send a LoRaWAN uplink
	// 1..63 = Send a LoRaWAN uplink after X WOR frames without a WOR ACK
	RelayEdBackOff uint32 `protobuf:"varint,41,opt,name=relay_ed_back_off,json=relayEdBackOff,proto3" json:"relay_ed_back_off,omitempty"`
	// Relay end-device uplink limit bucket size.
	//
	// This field indicates the multiplier to determine the bucket size
	// according to the following formula:
	// BucketSize TOKEN = _reload_rate x _bucket_size
	//
	// Valid values (0 - 3):
	//
	//	0 = 1
	//	1 = 2
	//	2 = 4
	//	3 = 12
	RelayEdUplinkLimitBucketSize uint32 `protobuf:"varint,42,opt,name=relay_ed_uplink_limit_bucket_size,json=relayEdUplinkLimitBucketSize,proto3" json:"relay_ed_uplink_limit_bucket_size,omitempty"`
	// Relay end-device uplink limit reload rate.
	//
	// Valid values:
	//   - 0 - 62 = X tokens every hour
	//   - 63     = no limitation
	RelayEdUplinkLimitReloadRate uint32 `protobuf:"varint,43,opt,name=relay_ed_uplink_limit_reload_rate,json=relayEdUplinkLimitReloadRate,proto3" json:"relay_ed_uplink_limit_reload_rate,omitempty"`
	// Relay join-request limit reload rate.
	//
	// Valid values:
	//   - 0 - 126 = X tokens every hour
	//   - 127     = no limitation
	RelayJoinReqLimitReloadRate uint32 `protobuf:"varint,44,opt,name=relay_join_req_limit_reload_rate,json=relayJoinReqLimitReloadRate,proto3" json:"relay_join_req_limit_reload_rate,omitempty"`
	// Relay notify limit reload rate.
	//
	// Valid values:
	//   - 0 - 126 = X tokens every hour
	//   - 127     = no limitation
	RelayNotifyLimitReloadRate uint32 `protobuf:"varint,45,opt,name=relay_notify_limit_reload_rate,json=relayNotifyLimitReloadRate,proto3" json:"relay_notify_limit_reload_rate,omitempty"`
	// Relay global uplink limit reload rate.
	//
	// Valid values:
	//   - 0 - 126 = X tokens every hour
	//   - 127     = no limitation
	RelayGlobalUplinkLimitReloadRate uint32 `protobuf:"varint,46,opt,name=relay_global_uplink_limit_reload_rate,json=relayGlobalUplinkLimitReloadRate,proto3" json:"relay_global_uplink_limit_reload_rate,omitempty"`
	// Relay overall limit reload rate.
	//
	// Valid values:
	//   - 0 - 126 = X tokens every hour
	//   - 127     = no limitation
	RelayOverallLimitReloadRate uint32 `protobuf:"varint,47,opt,name=relay_overall_limit_reload_rate,json=relayOverallLimitReloadRate,proto3" json:"relay_overall_limit_reload_rate,omitempty"`
	// Relay join-request limit bucket size.
	//
	// This field indicates the multiplier to determine the bucket size
	// according to the following formula:
	// BucketSize TOKEN = _reload_rate x _bucket_size
	//
	// Valid values (0 - 3):
	//
	//	0 = 1
	//	1 = 2
	//	2 = 4
	//	3 = 12
	RelayJoinReqLimitBucketSize uint32 `protobuf:"varint,48,opt,name=relay_join_req_limit_bucket_size,json=relayJoinReqLimitBucketSize,proto3" json:"relay_join_req_limit_bucket_size,omitempty"`
	// Relay notify limit bucket size.
	//
	// This field indicates the multiplier to determine the bucket size
	// according to the following formula:
	// BucketSize TOKEN = _reload_rate x _bucket_size
	//
	// Valid values (0 - 3):
	//
	//	0 = 1
	//	1 = 2
	//	2 = 4
	//	3 = 12
	RelayNotifyLimitBucketSize uint32 `protobuf:"varint,49,opt,name=relay_notify_limit_bucket_size,json=relayNotifyLimitBucketSize,proto3" json:"relay_notify_limit_bucket_size,omitempty"`
	// Relay globak uplink limit bucket size.
	//
	// This field indicates the multiplier to determine the bucket size
	// according to the following formula:
	// BucketSize TOKEN = _reload_rate x _bucket_size
	//
	// Valid values (0 - 3):
	//
	//	0 = 1
	//	1 = 2
	//	2 = 4
	//	3 = 12
	RelayGlobalUplinkLimitBucketSize uint32 `protobuf:"varint,50,opt,name=relay_global_uplink_limit_bucket_size,json=relayGlobalUplinkLimitBucketSize,proto3" json:"relay_global_uplink_limit_bucket_size,omitempty"`
	// Relay overall limit bucket size.
	//
	// This field indicates the multiplier to determine the bucket size
	// according to the following formula:
	// BucketSize TOKEN = _reload_rate x _bucket_size
	//
	// Valid values (0 - 3):
	//
	//	0 = 1
	//	1 = 2
	//	2 = 4
	//	3 = 12
	RelayOverallLimitBucketSize uint32 `protobuf:"varint,51,opt,name=relay_overall_limit_bucket_size,json=relayOverallLimitBucketSize,proto3" json:"relay_overall_limit_bucket_size,omitempty"`
	// Allow roaming.
	//
	// If set to true, it means that the device is allowed to use roaming.
	AllowRoaming bool `protobuf:"varint,52,opt,name=allow_roaming,json=allowRoaming,proto3" json:"allow_roaming,omitempty"`
	// RX1 Delay.
	//
	// This makes it possible to override the system RX1 Delay. Please note that
	// this values only has effect in case it is higher than the system value.
	// In other words, it can be used to increase the RX1 Delay but not to decrease
	// it.
	// Valid options are 1 - 15 (0 = always use system RX1 Delay).
	Rx1Delay uint32 `protobuf:"varint,53,opt,name=rx1_delay,json=rx1Delay,proto3" json:"rx1_delay,omitempty"`
}

func (x *DeviceProfile) Reset() {
	*x = DeviceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProfile) ProtoMessage() {}

func (x *DeviceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProfile.ProtoReflect.Descriptor instead.
func (*DeviceProfile) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceProfile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceProfile) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeviceProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceProfile) GetRegion() common.Region {
	if x != nil {
		return x.Region
	}
	return common.Region(0)
}

func (x *DeviceProfile) GetMacVersion() common.MacVersion {
	if x != nil {
		return x.MacVersion
	}
	return common.MacVersion(0)
}

func (x *DeviceProfile) GetRegParamsRevision() common.RegParamsRevision {
	if x != nil {
		return x.RegParamsRevision
	}
	return common.RegParamsRevision(0)
}

func (x *DeviceProfile) GetAdrAlgorithmId() string {
	if x != nil {
		return x.AdrAlgorithmId
	}
	return ""
}

func (x *DeviceProfile) GetPayloadCodecRuntime() CodecRuntime {
	if x != nil {
		return x.PayloadCodecRuntime
	}
	return CodecRuntime_NONE
}

func (x *DeviceProfile) GetPayloadCodecScript() string {
	if x != nil {
		return x.PayloadCodecScript
	}
	return ""
}

func (x *DeviceProfile) GetFlushQueueOnActivate() bool {
	if x != nil {
		return x.FlushQueueOnActivate
	}
	return false
}

func (x *DeviceProfile) GetUplinkInterval() uint32 {
	if x != nil {
		return x.UplinkInterval
	}
	return 0
}

func (x *DeviceProfile) GetDeviceStatusReqInterval() uint32 {
	if x != nil {
		return x.DeviceStatusReqInterval
	}
	return 0
}

func (x *DeviceProfile) GetSupportsOtaa() bool {
	if x != nil {
		return x.SupportsOtaa
	}
	return false
}

func (x *DeviceProfile) GetSupportsClassB() bool {
	if x != nil {
		return x.SupportsClassB
	}
	return false
}

func (x *DeviceProfile) GetSupportsClassC() bool {
	if x != nil {
		return x.SupportsClassC
	}
	return false
}

func (x *DeviceProfile) GetClassBTimeout() uint32 {
	if x != nil {
		return x.ClassBTimeout
	}
	return 0
}

func (x *DeviceProfile) GetClassBPingSlotNbK() uint32 {
	if x != nil {
		return x.ClassBPingSlotNbK
	}
	return 0
}

func (x *DeviceProfile) GetClassBPingSlotDr() uint32 {
	if x != nil {
		return x.ClassBPingSlotDr
	}
	return 0
}

func (x *DeviceProfile) GetClassBPingSlotFreq() uint32 {
	if x != nil {
		return x.ClassBPingSlotFreq
	}
	return 0
}

func (x *DeviceProfile) GetClassCTimeout() uint32 {
	if x != nil {
		return x.ClassCTimeout
	}
	return 0
}

func (x *DeviceProfile) GetAbpRx1Delay() uint32 {
	if x != nil {
		return x.AbpRx1Delay
	}
	return 0
}

func (x *DeviceProfile) GetAbpRx1DrOffset() uint32 {
	if x != nil {
		return x.AbpRx1DrOffset
	}
	return 0
}

func (x *DeviceProfile) GetAbpRx2Dr() uint32 {
	if x != nil {
		return x.AbpRx2Dr
	}
	return 0
}

func (x *DeviceProfile) GetAbpRx2Freq() uint32 {
	if x != nil {
		return x.AbpRx2Freq
	}
	return 0
}

func (x *DeviceProfile) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DeviceProfile) GetMeasurements() map[string]*Measurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

func (x *DeviceProfile) GetAutoDetectMeasurements() bool {
	if x != nil {
		return x.AutoDetectMeasurements
	}
	return false
}

func (x *DeviceProfile) GetRegionConfigId() string {
	if x != nil {
		return x.RegionConfigId
	}
	return ""
}

func (x *DeviceProfile) GetIsRelay() bool {
	if x != nil {
		return x.IsRelay
	}
	return false
}

func (x *DeviceProfile) GetIsRelayEd() bool {
	if x != nil {
		return x.IsRelayEd
	}
	return false
}

func (x *DeviceProfile) GetRelayEdRelayOnly() bool {
	if x != nil {
		return x.RelayEdRelayOnly
	}
	return false
}

func (x *DeviceProfile) GetRelayEnabled() bool {
	if x != nil {
		return x.RelayEnabled
	}
	return false
}

func (x *DeviceProfile) GetRelayCadPeriodicity() CadPeriodicity {
	if x != nil {
		return x.RelayCadPeriodicity
	}
	return CadPeriodicity_SEC_1
}

func (x *DeviceProfile) GetRelayDefaultChannelIndex() uint32 {
	if x != nil {
		return x.RelayDefaultChannelIndex
	}
	return 0
}

func (x *DeviceProfile) GetRelaySecondChannelFreq() uint32 {
	if x != nil {
		return x.RelaySecondChannelFreq
	}
	return 0
}

func (x *DeviceProfile) GetRelaySecondChannelDr() uint32 {
	if x != nil {
		return x.RelaySecondChannelDr
	}
	return 0
}

func (x *DeviceProfile) GetRelaySecondChannelAckOffset() SecondChAckOffset {
	if x != nil {
		return x.RelaySecondChannelAckOffset
	}
	return SecondChAckOffset_KHZ_0
}

func (x *DeviceProfile) GetRelayEdActivationMode() RelayModeActivation {
	if x != nil {
		return x.RelayEdActivationMode
	}
	return RelayModeActivation_DISABLE_RELAY_MODE
}

func (x *DeviceProfile) GetRelayEdSmartEnableLevel() uint32 {
	if x != nil {
		return x.RelayEdSmartEnableLevel
	}
	return 0
}

func (x *DeviceProfile) GetRelayEdBackOff() uint32 {
	if x != nil {
		return x.RelayEdBackOff
	}
	return 0
}

func (x *DeviceProfile) GetRelayEdUplinkLimitBucketSize() uint32 {
	if x != nil {
		return x.RelayEdUplinkLimitBucketSize
	}
	return 0
}

func (x *DeviceProfile) GetRelayEdUplinkLimitReloadRate() uint32 {
	if x != nil {
		return x.RelayEdUplinkLimitReloadRate
	}
	return 0
}

func (x *DeviceProfile) GetRelayJoinReqLimitReloadRate() uint32 {
	if x != nil {
		return x.RelayJoinReqLimitReloadRate
	}
	return 0
}

func (x *DeviceProfile) GetRelayNotifyLimitReloadRate() uint32 {
	if x != nil {
		return x.RelayNotifyLimitReloadRate
	}
	return 0
}

func (x *DeviceProfile) GetRelayGlobalUplinkLimitReloadRate() uint32 {
	if x != nil {
		return x.RelayGlobalUplinkLimitReloadRate
	}
	return 0
}

func (x *DeviceProfile) GetRelayOverallLimitReloadRate() uint32 {
	if x != nil {
		return x.RelayOverallLimitReloadRate
	}
	return 0
}

func (x *DeviceProfile) GetRelayJoinReqLimitBucketSize() uint32 {
	if x != nil {
		return x.RelayJoinReqLimitBucketSize
	}
	return 0
}

func (x *DeviceProfile) GetRelayNotifyLimitBucketSize() uint32 {
	if x != nil {
		return x.RelayNotifyLimitBucketSize
	}
	return 0
}

func (x *DeviceProfile) GetRelayGlobalUplinkLimitBucketSize() uint32 {
	if x != nil {
		return x.RelayGlobalUplinkLimitBucketSize
	}
	return 0
}

func (x *DeviceProfile) GetRelayOverallLimitBucketSize() uint32 {
	if x != nil {
		return x.RelayOverallLimitBucketSize
	}
	return 0
}

func (x *DeviceProfile) GetAllowRoaming() bool {
	if x != nil {
		return x.AllowRoaming
	}
	return false
}

func (x *DeviceProfile) GetRx1Delay() uint32 {
	if x != nil {
		return x.Rx1Delay
	}
	return 0
}

type Measurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name (user defined).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Kind.
	Kind MeasurementKind `protobuf:"varint,3,opt,name=kind,proto3,enum=api.MeasurementKind" json:"kind,omitempty"`
}

func (x *Measurement) Reset() {
	*x = Measurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Measurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Measurement) ProtoMessage() {}

func (x *Measurement) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Measurement.ProtoReflect.Descriptor instead.
func (*Measurement) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{1}
}

func (x *Measurement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Measurement) GetKind() MeasurementKind {
	if x != nil {
		return x.Kind
	}
	return MeasurementKind_UNKNOWN
}

type DeviceProfileListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-profile ID (UUID).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Region.
	Region common.Region `protobuf:"varint,5,opt,name=region,proto3,enum=common.Region" json:"region,omitempty"`
	// LoRaWAN mac-version.
	MacVersion common.MacVersion `protobuf:"varint,6,opt,name=mac_version,json=macVersion,proto3,enum=common.MacVersion" json:"mac_version,omitempty"`
	// Regional parameters revision.
	RegParamsRevision common.RegParamsRevision `protobuf:"varint,7,opt,name=reg_params_revision,json=regParamsRevision,proto3,enum=common.RegParamsRevision" json:"reg_params_revision,omitempty"`
	// Supports OTAA.
	SupportsOtaa bool `protobuf:"varint,8,opt,name=supports_otaa,json=supportsOtaa,proto3" json:"supports_otaa,omitempty"`
	// Supports Class-B.
	SupportsClassB bool `protobuf:"varint,9,opt,name=supports_class_b,json=supportsClassB,proto3" json:"supports_class_b,omitempty"`
	// Supports Class-C.
	SupportsClassC bool `protobuf:"varint,10,opt,name=supports_class_c,json=supportsClassC,proto3" json:"supports_class_c,omitempty"`
}

func (x *DeviceProfileListItem) Reset() {
	*x = DeviceProfileListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProfileListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProfileListItem) ProtoMessage() {}

func (x *DeviceProfileListItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProfileListItem.ProtoReflect.Descriptor instead.
func (*DeviceProfileListItem) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceProfileListItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceProfileListItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeviceProfileListItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DeviceProfileListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceProfileListItem) GetRegion() common.Region {
	if x != nil {
		return x.Region
	}
	return common.Region(0)
}

func (x *DeviceProfileListItem) GetMacVersion() common.MacVersion {
	if x != nil {
		return x.MacVersion
	}
	return common.MacVersion(0)
}

func (x *DeviceProfileListItem) GetRegParamsRevision() common.RegParamsRevision {
	if x != nil {
		return x.RegParamsRevision
	}
	return common.RegParamsRevision(0)
}

func (x *DeviceProfileListItem) GetSupportsOtaa() bool {
	if x != nil {
		return x.SupportsOtaa
	}
	return false
}

func (x *DeviceProfileListItem) GetSupportsClassB() bool {
	if x != nil {
		return x.SupportsClassB
	}
	return false
}

func (x *DeviceProfileListItem) GetSupportsClassC() bool {
	if x != nil {
		return x.SupportsClassC
	}
	return false
}

type CreateDeviceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Object to create.
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=device_profile,json=deviceProfile,proto3" json:"device_profile,omitempty"`
}

func (x *CreateDeviceProfileRequest) Reset() {
	*x = CreateDeviceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceProfileRequest) ProtoMessage() {}

func (x *CreateDeviceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceProfileRequest) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDeviceProfileRequest) GetDeviceProfile() *DeviceProfile {
	if x != nil {
		return x.DeviceProfile
	}
	return nil
}

type CreateDeviceProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (UUID).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateDeviceProfileResponse) Reset() {
	*x = CreateDeviceProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceProfileResponse) ProtoMessage() {}

func (x *CreateDeviceProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceProfileResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceProfileResponse) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDeviceProfileResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDeviceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (UUID).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDeviceProfileRequest) Reset() {
	*x = GetDeviceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceProfileRequest) ProtoMessage() {}

func (x *GetDeviceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceProfileRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceProfileRequest) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{5}
}

func (x *GetDeviceProfileRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDeviceProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-profile object.
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=device_profile,json=deviceProfile,proto3" json:"device_profile,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetDeviceProfileResponse) Reset() {
	*x = GetDeviceProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceProfileResponse) ProtoMessage() {}

func (x *GetDeviceProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceProfileResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceProfileResponse) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeviceProfileResponse) GetDeviceProfile() *DeviceProfile {
	if x != nil {
		return x.DeviceProfile
	}
	return nil
}

func (x *GetDeviceProfileResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetDeviceProfileResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateDeviceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-profile object.
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=device_profile,json=deviceProfile,proto3" json:"device_profile,omitempty"`
}

func (x *UpdateDeviceProfileRequest) Reset() {
	*x = UpdateDeviceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceProfileRequest) ProtoMessage() {}

func (x *UpdateDeviceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceProfileRequest) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateDeviceProfileRequest) GetDeviceProfile() *DeviceProfile {
	if x != nil {
		return x.DeviceProfile
	}
	return nil
}

type DeleteDeviceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (UUID).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDeviceProfileRequest) Reset() {
	*x = DeleteDeviceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceProfileRequest) ProtoMessage() {}

func (x *DeleteDeviceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceProfileRequest) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDeviceProfileRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListDeviceProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max number of device-profiles to return in the result-set.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// If set, the given string will be used to search on name.
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	// Tenant ID to list the device-profiles for.
	TenantId string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *ListDeviceProfilesRequest) Reset() {
	*x = ListDeviceProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceProfilesRequest) ProtoMessage() {}

func (x *ListDeviceProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListDeviceProfilesRequest) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{9}
}

func (x *ListDeviceProfilesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDeviceProfilesRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListDeviceProfilesRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListDeviceProfilesRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ListDeviceProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of device-profiles.
	TotalCount uint32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Result-set.
	Result []*DeviceProfileListItem `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListDeviceProfilesResponse) Reset() {
	*x = ListDeviceProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceProfilesResponse) ProtoMessage() {}

func (x *ListDeviceProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceProfilesResponse) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{10}
}

func (x *ListDeviceProfilesResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListDeviceProfilesResponse) GetResult() []*DeviceProfileListItem {
	if x != nil {
		return x.Result
	}
	return nil
}

type ListDeviceProfileAdrAlgorithmsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of algorithms.
	TotalCount uint32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Result-set.
	Result []*AdrAlgorithmListItem `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListDeviceProfileAdrAlgorithmsResponse) Reset() {
	*x = ListDeviceProfileAdrAlgorithmsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceProfileAdrAlgorithmsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceProfileAdrAlgorithmsResponse) ProtoMessage() {}

func (x *ListDeviceProfileAdrAlgorithmsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceProfileAdrAlgorithmsResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceProfileAdrAlgorithmsResponse) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{11}
}

func (x *ListDeviceProfileAdrAlgorithmsResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListDeviceProfileAdrAlgorithmsResponse) GetResult() []*AdrAlgorithmListItem {
	if x != nil {
		return x.Result
	}
	return nil
}

type AdrAlgorithmListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Algorithm ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Algorithm name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AdrAlgorithmListItem) Reset() {
	*x = AdrAlgorithmListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_profile_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdrAlgorithmListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdrAlgorithmListItem) ProtoMessage() {}

func (x *AdrAlgorithmListItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_profile_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdrAlgorithmListItem.ProtoReflect.Descriptor instead.
func (*AdrAlgorithmListItem) Descriptor() ([]byte, []int) {
	return file_api_device_profile_proto_rawDescGZIP(), []int{12}
}

func (x *AdrAlgorithmListItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdrAlgorithmListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_api_device_profile_proto protoreflect.FileDescriptor

var file_api_device_profile_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf0, 0x16, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x63, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x64, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x72, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x35, 0x0a, 0x17, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6f, 0x74, 0x61, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x74,
	0x61, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x31,
	0x0a, 0x16, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x62, 0x5f, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x62,
	0x4b, 0x12, 0x2e, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x64, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x44,
	0x72, 0x12, 0x32, 0x0a, 0x16, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f,
	0x74, 0x46, 0x72, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x61, 0x62, 0x70, 0x5f, 0x72, 0x78, 0x31, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x62, 0x70, 0x52, 0x78, 0x31, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x62, 0x70, 0x5f, 0x72, 0x78, 0x31, 0x5f, 0x64, 0x72, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x62,
	0x70, 0x52, 0x78, 0x31, 0x44, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x0a,
	0x61, 0x62, 0x70, 0x5f, 0x72, 0x78, 0x32, 0x5f, 0x64, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x62, 0x70, 0x52, 0x78, 0x32, 0x44, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x62,
	0x70, 0x5f, 0x72, 0x78, 0x32, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x61, 0x62, 0x70, 0x52, 0x78, 0x32, 0x46, 0x72, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x48,
	0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x64, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x61, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x12, 0x35,
	0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x72, 0x12, 0x5c, 0x0a, 0x1f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x63,
	0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x68, 0x41, 0x63, 0x6b,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x63, 0x6b, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x18, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x65, 0x64, 0x5f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x45, 0x64, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x12,
	0x47, 0x0a, 0x21, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x45, 0x64, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x47, 0x0a, 0x21, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x64, 0x55, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x45, 0x0a, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x25,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x1f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4f,
	0x0a, 0x25, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x44, 0x0a, 0x1f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x78,
	0x31, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x78, 0x31, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x51, 0x0a, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0xd2, 0x03, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x63, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6f, 0x74, 0x61, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x74, 0x61,
	0x61, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x43, 0x22, 0x57, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2d,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x57, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7e, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x71, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x7c, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x64, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3a,
	0x0a, 0x14, 0x41, 0x64, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x31, 0x0a, 0x0c, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x59, 0x45, 0x4e, 0x4e, 0x45, 0x5f,
	0x4c, 0x50, 0x50, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x53, 0x10, 0x02, 0x2a, 0x50, 0x0a,
	0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x42,
	0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x55, 0x47,
	0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a,
	0x55, 0x0a, 0x0e, 0x43, 0x61, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x43, 0x5f, 0x31, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x53, 0x5f, 0x35, 0x30, 0x30, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x53, 0x5f, 0x32,
	0x35, 0x30, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x53, 0x5f, 0x31, 0x30, 0x30, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x53, 0x5f, 0x35, 0x30, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x53, 0x5f, 0x32, 0x30, 0x10, 0x05, 0x2a, 0x61, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x43, 0x68, 0x41, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x4b,
	0x48, 0x5a, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x48, 0x5a, 0x5f, 0x32, 0x30,
	0x30, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x48, 0x5a, 0x5f, 0x34, 0x30, 0x30, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x48, 0x5a, 0x5f, 0x38, 0x30, 0x30, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x4b, 0x48, 0x5a, 0x5f, 0x31, 0x36, 0x30, 0x30, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4b,
	0x48, 0x5a, 0x5f, 0x33, 0x32, 0x30, 0x30, 0x10, 0x05, 0x2a, 0x6c, 0x0a, 0x13, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xb8, 0x05, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x6c, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x65,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x76, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x3a, 0x01, 0x2a, 0x1a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x64, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x65, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x64, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x72, 0x2d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x73, 0x42, 0x98, 0x01, 0x0a, 0x11, 0x69, 0x6f, 0x2e, 0x63, 0x68, 0x69, 0x72, 0x70, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x69, 0x72, 0x70,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x63, 0x68, 0x69, 0x72, 0x70, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x61, 0x70, 0x69, 0xaa, 0x02,
	0x0e, 0x43, 0x68, 0x69, 0x72, 0x70, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x69, 0xca,
	0x02, 0x0e, 0x43, 0x68, 0x69, 0x72, 0x70, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5c, 0x41, 0x70, 0x69,
	0xe2, 0x02, 0x1a, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5c, 0x43,
	0x68, 0x69, 0x72, 0x70, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5c, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_device_profile_proto_rawDescOnce sync.Once
	file_api_device_profile_proto_rawDescData = file_api_device_profile_proto_rawDesc
)

func file_api_device_profile_proto_rawDescGZIP() []byte {
	file_api_device_profile_proto_rawDescOnce.Do(func() {
		file_api_device_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_device_profile_proto_rawDescData)
	})
	return file_api_device_profile_proto_rawDescData
}

var file_api_device_profile_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_api_device_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_api_device_profile_proto_goTypes = []interface{}{
	(CodecRuntime)(0),                              // 0: api.CodecRuntime
	(MeasurementKind)(0),                           // 1: api.MeasurementKind
	(CadPeriodicity)(0),                            // 2: api.CadPeriodicity
	(SecondChAckOffset)(0),                         // 3: api.SecondChAckOffset
	(RelayModeActivation)(0),                       // 4: api.RelayModeActivation
	(*DeviceProfile)(nil),                          // 5: api.DeviceProfile
	(*Measurement)(nil),                            // 6: api.Measurement
	(*DeviceProfileListItem)(nil),                  // 7: api.DeviceProfileListItem
	(*CreateDeviceProfileRequest)(nil),             // 8: api.CreateDeviceProfileRequest
	(*CreateDeviceProfileResponse)(nil),            // 9: api.CreateDeviceProfileResponse
	(*GetDeviceProfileRequest)(nil),                // 10: api.GetDeviceProfileRequest
	(*GetDeviceProfileResponse)(nil),               // 11: api.GetDeviceProfileResponse
	(*UpdateDeviceProfileRequest)(nil),             // 12: api.UpdateDeviceProfileRequest
	(*DeleteDeviceProfileRequest)(nil),             // 13: api.DeleteDeviceProfileRequest
	(*ListDeviceProfilesRequest)(nil),              // 14: api.ListDeviceProfilesRequest
	(*ListDeviceProfilesResponse)(nil),             // 15: api.ListDeviceProfilesResponse
	(*ListDeviceProfileAdrAlgorithmsResponse)(nil), // 16: api.ListDeviceProfileAdrAlgorithmsResponse
	(*AdrAlgorithmListItem)(nil),                   // 17: api.AdrAlgorithmListItem
	nil,                                            // 18: api.DeviceProfile.TagsEntry
	nil,                                            // 19: api.DeviceProfile.MeasurementsEntry
	(common.Region)(0),                             // 20: common.Region
	(common.MacVersion)(0),                         // 21: common.MacVersion
	(common.RegParamsRevision)(0),                  // 22: common.RegParamsRevision
	(*timestamppb.Timestamp)(nil),                  // 23: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                          // 24: google.protobuf.Empty
}
var file_api_device_profile_proto_depIdxs = []int32{
	20, // 0: api.DeviceProfile.region:type_name -> common.Region
	21, // 1: api.DeviceProfile.mac_version:type_name -> common.MacVersion
	22, // 2: api.DeviceProfile.reg_params_revision:type_name -> common.RegParamsRevision
	0,  // 3: api.DeviceProfile.payload_codec_runtime:type_name -> api.CodecRuntime
	18, // 4: api.DeviceProfile.tags:type_name -> api.DeviceProfile.TagsEntry
	19, // 5: api.DeviceProfile.measurements:type_name -> api.DeviceProfile.MeasurementsEntry
	2,  // 6: api.DeviceProfile.relay_cad_periodicity:type_name -> api.CadPeriodicity
	3,  // 7: api.DeviceProfile.relay_second_channel_ack_offset:type_name -> api.SecondChAckOffset
	4,  // 8: api.DeviceProfile.relay_ed_activation_mode:type_name -> api.RelayModeActivation
	1,  // 9: api.Measurement.kind:type_name -> api.MeasurementKind
	23, // 10: api.DeviceProfileListItem.created_at:type_name -> google.protobuf.Timestamp
	23, // 11: api.DeviceProfileListItem.updated_at:type_name -> google.protobuf.Timestamp
	20, // 12: api.DeviceProfileListItem.region:type_name -> common.Region
	21, // 13: api.DeviceProfileListItem.mac_version:type_name -> common.MacVersion
	22, // 14: api.DeviceProfileListItem.reg_params_revision:type_name -> common.RegParamsRevision
	5,  // 15: api.CreateDeviceProfileRequest.device_profile:type_name -> api.DeviceProfile
	5,  // 16: api.GetDeviceProfileResponse.device_profile:type_name -> api.DeviceProfile
	23, // 17: api.GetDeviceProfileResponse.created_at:type_name -> google.protobuf.Timestamp
	23, // 18: api.GetDeviceProfileResponse.updated_at:type_name -> google.protobuf.Timestamp
	5,  // 19: api.UpdateDeviceProfileRequest.device_profile:type_name -> api.DeviceProfile
	7,  // 20: api.ListDeviceProfilesResponse.result:type_name -> api.DeviceProfileListItem
	17, // 21: api.ListDeviceProfileAdrAlgorithmsResponse.result:type_name -> api.AdrAlgorithmListItem
	6,  // 22: api.DeviceProfile.MeasurementsEntry.value:type_name -> api.Measurement
	8,  // 23: api.DeviceProfileService.Create:input_type -> api.CreateDeviceProfileRequest
	10, // 24: api.DeviceProfileService.Get:input_type -> api.GetDeviceProfileRequest
	12, // 25: api.DeviceProfileService.Update:input_type -> api.UpdateDeviceProfileRequest
	13, // 26: api.DeviceProfileService.Delete:input_type -> api.DeleteDeviceProfileRequest
	14, // 27: api.DeviceProfileService.List:input_type -> api.ListDeviceProfilesRequest
	24, // 28: api.DeviceProfileService.ListAdrAlgorithms:input_type -> google.protobuf.Empty
	9,  // 29: api.DeviceProfileService.Create:output_type -> api.CreateDeviceProfileResponse
	11, // 30: api.DeviceProfileService.Get:output_type -> api.GetDeviceProfileResponse
	24, // 31: api.DeviceProfileService.Update:output_type -> google.protobuf.Empty
	24, // 32: api.DeviceProfileService.Delete:output_type -> google.protobuf.Empty
	15, // 33: api.DeviceProfileService.List:output_type -> api.ListDeviceProfilesResponse
	16, // 34: api.DeviceProfileService.ListAdrAlgorithms:output_type -> api.ListDeviceProfileAdrAlgorithmsResponse
	29, // [29:35] is the sub-list for method output_type
	23, // [23:29] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_device_profile_proto_init() }
func file_api_device_profile_proto_init() {
	if File_api_device_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_device_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Measurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProfileListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceProfileAdrAlgorithmsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_profile_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdrAlgorithmListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_device_profile_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_device_profile_proto_goTypes,
		DependencyIndexes: file_api_device_profile_proto_depIdxs,
		EnumInfos:         file_api_device_profile_proto_enumTypes,
		MessageInfos:      file_api_device_profile_proto_msgTypes,
	}.Build()
	File_api_device_profile_proto = out.File
	file_api_device_profile_proto_rawDesc = nil
	file_api_device_profile_proto_goTypes = nil
	file_api_device_profile_proto_depIdxs = nil
}
