"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import google.protobuf.empty_pb2
import grpc

from .tenant_pb2 import *
# TenantService is the service providing API methods for managing tenants.
class TenantServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    # Create a new tenant.
    Create:grpc.UnaryUnaryMultiCallable[
        global___CreateTenantRequest,
        global___CreateTenantResponse] = ...

    # Get the tenant for the given ID.
    Get:grpc.UnaryUnaryMultiCallable[
        global___GetTenantRequest,
        global___GetTenantResponse] = ...

    # Update the given tenant.
    Update:grpc.UnaryUnaryMultiCallable[
        global___UpdateTenantRequest,
        google.protobuf.empty_pb2.Empty] = ...

    # Delete the tenant with the given ID.
    Delete:grpc.UnaryUnaryMultiCallable[
        global___DeleteTenantRequest,
        google.protobuf.empty_pb2.Empty] = ...

    # Get the list of tenants.
    List:grpc.UnaryUnaryMultiCallable[
        global___ListTenantsRequest,
        global___ListTenantsResponse] = ...

    # Add an user to the tenant.
    # Note: the user must already exist.
    AddUser:grpc.UnaryUnaryMultiCallable[
        global___AddTenantUserRequest,
        google.protobuf.empty_pb2.Empty] = ...

    # Get the the tenant user for the given tenant and user IDs.
    GetUser:grpc.UnaryUnaryMultiCallable[
        global___GetTenantUserRequest,
        global___GetTenantUserResponse] = ...

    # Update the given tenant user.
    UpdateUser:grpc.UnaryUnaryMultiCallable[
        global___UpdateTenantUserRequest,
        google.protobuf.empty_pb2.Empty] = ...

    # Delete the given tenant user.
    DeleteUser:grpc.UnaryUnaryMultiCallable[
        global___DeleteTenantUserRequest,
        google.protobuf.empty_pb2.Empty] = ...

    # Get the list of tenant users.
    ListUsers:grpc.UnaryUnaryMultiCallable[
        global___ListTenantUsersRequest,
        global___ListTenantUsersResponse] = ...


# TenantService is the service providing API methods for managing tenants.
class TenantServiceServicer(metaclass=abc.ABCMeta):
    # Create a new tenant.
    @abc.abstractmethod
    def Create(self,
        request: global___CreateTenantRequest,
        context: grpc.ServicerContext,
    ) -> global___CreateTenantResponse: ...

    # Get the tenant for the given ID.
    @abc.abstractmethod
    def Get(self,
        request: global___GetTenantRequest,
        context: grpc.ServicerContext,
    ) -> global___GetTenantResponse: ...

    # Update the given tenant.
    @abc.abstractmethod
    def Update(self,
        request: global___UpdateTenantRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    # Delete the tenant with the given ID.
    @abc.abstractmethod
    def Delete(self,
        request: global___DeleteTenantRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    # Get the list of tenants.
    @abc.abstractmethod
    def List(self,
        request: global___ListTenantsRequest,
        context: grpc.ServicerContext,
    ) -> global___ListTenantsResponse: ...

    # Add an user to the tenant.
    # Note: the user must already exist.
    @abc.abstractmethod
    def AddUser(self,
        request: global___AddTenantUserRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    # Get the the tenant user for the given tenant and user IDs.
    @abc.abstractmethod
    def GetUser(self,
        request: global___GetTenantUserRequest,
        context: grpc.ServicerContext,
    ) -> global___GetTenantUserResponse: ...

    # Update the given tenant user.
    @abc.abstractmethod
    def UpdateUser(self,
        request: global___UpdateTenantUserRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    # Delete the given tenant user.
    @abc.abstractmethod
    def DeleteUser(self,
        request: global___DeleteTenantUserRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    # Get the list of tenant users.
    @abc.abstractmethod
    def ListUsers(self,
        request: global___ListTenantUsersRequest,
        context: grpc.ServicerContext,
    ) -> global___ListTenantUsersResponse: ...


def add_TenantServiceServicer_to_server(servicer: TenantServiceServicer, server: grpc.Server) -> None: ...
